
==========================
 0-add_integer.py
=========================

``add_integer(...)``` returns the addition of its two numbers

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 5)
    7

::

    >>> add_integer(2, -3)
    -1

 floating-point values.

::

    >>> add_integer(5.0, 3.0)
    8

floats are casted to ints before addition is performed.

::

    >>> add_integer(2.9, 1.2)
    3

::

    >>> add_integer(-2.9, -1.2)
    -3

Floating and non-floating point values can be combined.

::

    >>> add_integer(2.4, -3)
    -1

The second argument is optional - by default, it is 98.

::

    >>> add_integer(3)
    101

Non-Numbers
===========

Exxpects that both arguments are either integers or floats.


::

    >>> add_integer("jojo", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "helo")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("hello", "therehh")
    Traceback (most recent call last):
    TypeError: a must be an integer

function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

 NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
